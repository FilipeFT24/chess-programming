#include "bitboard.h"

constexpr uint64_t FileA = 0x0101010101010101ULL;
constexpr uint64_t Rank1 = 0xFF00000000000000ULL;
constexpr uint64_t DiagX = 0x0102040810204080ULL;
constexpr uint64_t DiagY = 0x8040201008040201ULL;

enum : int{
	A8, B8, C8, D8, E8, F8, G8, H8,
	A7, B7, C7, D7, E7, F7, G7, H7,
	A6, B6, C6, D6, E6, F6, G6, H6,
	A5, B5, C5, D5, E5, F5, G5, H5,
	A4, B4, C4, D4, E4, F4, G4, H4,
	A3, B3, C3, D3, E3, F3, G3, H3,
	A2, B2, C2, D2, E2, F2, G2, H2,
	A1, B1, C1, D1, E1, F1, G1, H1
};
const vector<pair<int, int>> X_ij{
	{0, 7}, {1, 7}, {2, 7}, {3, 7}, {4, 7}, {5, 7}, {6, 7}, {7, 7},
	{0, 6}, {1, 6}, {2, 6}, {3, 6}, {4, 6}, {5, 6}, {6, 6}, {7, 6},
	{0, 5}, {1, 5}, {2, 5}, {3, 5}, {4, 5}, {5, 5}, {6, 5}, {7, 5},
	{0, 4}, {1, 4}, {2, 4}, {3, 4}, {4, 4}, {5, 4}, {6, 4}, {7, 4},
	{0, 3}, {1, 3}, {2, 3}, {3, 3}, {4, 3}, {5, 3}, {6, 3}, {7, 3},
	{0, 2}, {1, 2}, {2, 2}, {3, 2}, {4, 2}, {5, 2}, {6, 2}, {7, 2},
	{0, 1}, {1, 1}, {2, 1}, {3, 1}, {4, 1}, {5, 1}, {6, 1}, {7, 1},
	{0, 0}, {1, 0}, {2, 0}, {3, 0}, {4, 0}, {5, 0}, {6, 0}, {7, 0}
};
const vector<uint64_t> File{
	FileA << (0),
	FileA << (1),
	FileA << (2),
	FileA << (3),
	FileA << (4),
	FileA << (5),
	FileA << (6),
	FileA << (7)
};
const vector<uint64_t> Rank{
	Rank1 >> (0*8),
	Rank1 >> (1*8),
	Rank1 >> (2*8),
	Rank1 >> (3*8),
	Rank1 >> (4*8),
	Rank1 >> (5*8),
	Rank1 >> (6*8),
	Rank1 >> (7*8)
};
static inline uint64_t Diag1(int d){
	if(d > 0){
		return (DiagX <<  d) & ~(0x0101010101010101ULL*((2ULL << (d-1))-1)); // i-j = const (i >  j)
	}
	else{
		return (DiagX >> -d) &  (0x0101010101010101ULL*((2ULL << (7+d))-1)); // i-j = const (j >= i)
	}
}
static inline uint64_t Diag2(int d){
	if(d > 0){
		return (DiagY <<  d) & ~(0xFFFFFFFFFFFFFFFFULL << (8*(8-d)));        // i+j = const (i >  7-j)
	}
	else{
		return (DiagY >> -d) &  (0xFFFFFFFFFFFFFFFFULL << (8*( -d)));        // i+j = const (i <= 7-j)
	}
}

Bitboard::Bitboard() : _BA_mask(64, 0ULL), _KA_mask(64, 0ULL), _NA_mask(64, 0ULL), _PA_mask(2, vector<uint64_t>(64, 0ULL)), _RA_mask(64, 0ULL){
	BA_mask();
	KA_mask();
	NA_mask();
	PA_mask();
	RA_mask();
}
void Bitboard::BA_mask(){
	for(vector<uint64_t>::iterator i = _BA_mask.begin(); i != _BA_mask.end(); ++i){
		*i |= (Diag1(get<0>(X_ij[i-_BA_mask.begin()])-get<1>(X_ij[i-_BA_mask.begin()])  )) & ~((1ULL << (i-_BA_mask.begin())) | 0xFF818181818181FFULL); // i-j   = const
		*i |= (Diag2(get<0>(X_ij[i-_BA_mask.begin()])+get<1>(X_ij[i-_BA_mask.begin()])-7)) & ~((1ULL << (i-_BA_mask.begin())) | 0xFF818181818181FFULL); // i+j-7 = const
	}
}
void Bitboard::KA_mask(){
	for(vector<uint64_t>::iterator i = _KA_mask.begin(); i != _KA_mask.end(); ++i){
		*i |= ((1ULL << (i-_KA_mask.begin())) >>  1) & ~(File[7]);
		*i |= ((1ULL << (i-_KA_mask.begin())) >>  7) & ~(File[0]);
		*i |= ((1ULL << (i-_KA_mask.begin())) >>  8);
		*i |= ((1ULL << (i-_KA_mask.begin())) >>  9) & ~(File[7]);
		*i |= ((1ULL << (i-_KA_mask.begin())) <<  1) & ~(File[0]);
		*i |= ((1ULL << (i-_KA_mask.begin())) <<  7) & ~(File[7]);
		*i |= ((1ULL << (i-_KA_mask.begin())) <<  8);
		*i |= ((1ULL << (i-_KA_mask.begin())) <<  9) & ~(File[0]);
	}
}
void Bitboard::NA_mask(){
	for(vector<uint64_t>::iterator i = _NA_mask.begin(); i != _NA_mask.end(); ++i){
		*i |= ((1ULL << (i-_NA_mask.begin())) >>  6) & ~(File[0] | File[1]);
		*i |= ((1ULL << (i-_NA_mask.begin())) >> 10) & ~(File[6] | File[7]);
		*i |= ((1ULL << (i-_NA_mask.begin())) >> 15) & ~(File[0]);
		*i |= ((1ULL << (i-_NA_mask.begin())) >> 17) & ~(File[7]);
		*i |= ((1ULL << (i-_NA_mask.begin())) <<  6) & ~(File[6] | File[7]);
		*i |= ((1ULL << (i-_NA_mask.begin())) << 10) & ~(File[0] | File[1]);
		*i |= ((1ULL << (i-_NA_mask.begin())) << 15) & ~(File[7]);
		*i |= ((1ULL << (i-_NA_mask.begin())) << 17) & ~(File[0]);
	}
}
void Bitboard::PA_mask(){
	for(vector<uint64_t>::iterator i = _PA_mask[0].begin()+8; i != _PA_mask[0].end()-8; ++i){
		*i |= ((1ULL << (i-_PA_mask[0].begin())) >>  7) & ~(File[0]);
		*i |= ((1ULL << (i-_PA_mask[0].begin())) >>  9) & ~(File[7]);
	}
	for(vector<uint64_t>::iterator i = _PA_mask[1].begin()+8; i != _PA_mask[1].end()-8; ++i){
		*i |= ((1ULL << (i-_PA_mask[1].begin())) <<  7) & ~(File[7]);
		*i |= ((1ULL << (i-_PA_mask[1].begin())) <<  9) & ~(File[0]);
	}
}
void Bitboard::RA_mask(){
	for(vector<uint64_t>::iterator i = _RA_mask.begin(); i != _RA_mask.end(); ++i){
		*i |= File[get<0>(X_ij[i-_RA_mask.begin()])] & ~((1ULL << (i-_RA_mask.begin())) | Rank[0] | Rank[7]);
		*i |= Rank[get<1>(X_ij[i-_RA_mask.begin()])] & ~((1ULL << (i-_RA_mask.begin())) | File[0] | File[7]);
	}
}
/*
*/
const unsigned int MM_BShift[64] = {
	52, 53, 53, 53, 53, 53, 53, 52,
	53, 54, 54, 54, 54, 54, 54, 53,
	53, 54, 54, 54, 54, 54, 54, 53,
	53, 54, 54, 54, 54, 54, 54, 53,
	53, 54, 54, 54, 54, 54, 54, 53,
	53, 54, 54, 54, 54, 54, 54, 53,
	53, 54, 54, 54, 54, 54, 54, 53,
	53, 54, 54, 53, 53, 53, 53, 53
};
const unsigned int MM_RShift[64] = {
	58, 59, 59, 59, 59, 59, 59, 58,
	59, 59, 59, 59, 59, 59, 59, 59,
	59, 59, 57, 57, 57, 57, 59, 59,
	59, 59, 57, 55, 55, 57, 59, 59,
	59, 59, 57, 55, 55, 57, 59, 59,
	59, 59, 57, 57, 57, 57, 59, 59,
	59, 59, 59, 59, 59, 59, 59, 59,
	58, 59, 59, 59, 59, 59, 59, 58
};
const uint64_t MM_BMagic[64] = {
	0x0002020202020200, 0x0002020202020000, 0x0004010202000000, 0x0004040080000000,
	0x0001104000000000, 0x0000821040000000, 0x0000410410400000, 0x0000104104104000,
	0x0000040404040400, 0x0000020202020200, 0x0000040102020000, 0x0000040400800000,
	0x0000011040000000, 0x0000008210400000, 0x0000004104104000, 0x0000002082082000,
	0x0004000808080800, 0x0002000404040400, 0x0001000202020200, 0x0000800802004000,
	0x0000800400A00000, 0x0000200100884000, 0x0000400082082000, 0x0000200041041000,
	0x0002080010101000, 0x0001040008080800, 0x0000208004010400, 0x0000404004010200,
	0x0000840000802000, 0x0000404002011000, 0x0000808001041000, 0x0000404000820800,
	0x0001041000202000, 0x0000820800101000, 0x0000104400080800, 0x0000020080080080,
	0x0000404040040100, 0x0000808100020100, 0x0001010100020800, 0x0000808080010400,
	0x0000820820004000, 0x0000410410002000, 0x0000082088001000, 0x0000002011000800,
	0x0000080100400400, 0x0001010101000200, 0x0002020202000400, 0x0001010101000200,
	0x0000410410400000, 0x0000208208200000, 0x0000002084100000, 0x0000000020880000,
	0x0000001002020000, 0x0000040408020000, 0x0004040404040000, 0x0002020202020000,
	0x0000104104104000, 0x0000002082082000, 0x0000000020841000, 0x0000000000208800,
	0x0000000010020200, 0x0000000404080200, 0x0000040404040400, 0x0002020202020200
};
const uint64_t MM_RMagic[64] = {
	0x0080001020400080, 0x0040001000200040, 0x0080081000200080, 0x0080040800100080,
	0x0080020400080080, 0x0080010200040080, 0x0080008001000200, 0x0080002040800100,
	0x0000800020400080, 0x0000400020005000, 0x0000801000200080, 0x0000800800100080,
	0x0000800400080080, 0x0000800200040080, 0x0000800100020080, 0x0000800040800100,
	0x0000208000400080, 0x0000404000201000, 0x0000808010002000, 0x0000808008001000,
	0x0000808004000800, 0x0000808002000400, 0x0000010100020004, 0x0000020000408104,
	0x0000208080004000, 0x0000200040005000, 0x0000100080200080, 0x0000080080100080,
	0x0000040080080080, 0x0000020080040080, 0x0000010080800200, 0x0000800080004100,
	0x0000204000800080, 0x0000200040401000, 0x0000100080802000, 0x0000080080801000,
	0x0000040080800800, 0x0000020080800400, 0x0000020001010004, 0x0000800040800100,
	0x0000204000808000, 0x0000200040008080, 0x0000100020008080, 0x0000080010008080,
	0x0000040008008080, 0x0000020004008080, 0x0000010002008080, 0x0000004081020004,
	0x0000204000800080, 0x0000200040008080, 0x0000100020008080, 0x0000080010008080,
	0x0000040008008080, 0x0000020004008080, 0x0000800100020080, 0x0000800041000080,
	0x00FFFCDDFCED714A, 0x007FFCDDFCED714A, 0x003FFFCDFFD88096, 0x0000040810002101,
	0x0001000204080011, 0x0001000204000801, 0x0001000082000401, 0x0001FFFAABFAD1A2
};
const uint64_t MM_BMask[64] = {
	0x0040201008040200, 0x0000402010080400, 0x0000004020100A00, 0x0000000040221400,
	0x0000000002442800, 0x0000000204085000, 0x0000020408102000, 0x0002040810204000,
	0x0020100804020000, 0x0040201008040000, 0x00004020100A0000, 0x0000004022140000,
	0x0000000244280000, 0x0000020408500000, 0x0002040810200000, 0x0004081020400000,
	0x0010080402000200, 0x0020100804000400, 0x004020100A000A00, 0x0000402214001400,
	0x0000024428002800, 0x0002040850005000, 0x0004081020002000, 0x0008102040004000,
	0x0008040200020400, 0x0010080400040800, 0x0020100A000A1000, 0x0040221400142200,
	0x0002442800284400, 0x0004085000500800, 0x0008102000201000, 0x0010204000402000,
	0x0004020002040800, 0x0008040004081000, 0x00100A000A102000, 0x0022140014224000,
	0x0044280028440200, 0x0008500050080400, 0x0010200020100800, 0x0020400040201000,
	0x0002000204081000, 0x0004000408102000, 0x000A000A10204000, 0x0014001422400000,
	0x0028002844020000, 0x0050005008040200, 0x0020002010080400, 0x0040004020100800,
	0x0000020408102000, 0x0000040810204000, 0x00000A1020400000, 0x0000142240000000,
	0x0000284402000000, 0x0000500804020000, 0x0000201008040200, 0x0000402010080400,
	0x0002040810204000, 0x0004081020400000, 0x000A102040000000, 0x0014224000000000,
	0x0028440200000000, 0x0050080402000000, 0x0020100804020000, 0x0040201008040200
};
const uint64_t MM_RMask[64] = {
	0x000101010101017E, 0x000202020202027C, 0x000404040404047A, 0x0008080808080876,
	0x001010101010106E, 0x002020202020205E, 0x004040404040403E, 0x008080808080807E,
	0x0001010101017E00, 0x0002020202027C00, 0x0004040404047A00, 0x0008080808087600,
	0x0010101010106E00, 0x0020202020205E00, 0x0040404040403E00, 0x0080808080807E00,
	0x00010101017E0100, 0x00020202027C0200, 0x00040404047A0400, 0x0008080808760800,
	0x00101010106E1000, 0x00202020205E2000, 0x00404040403E4000, 0x00808080807E8000,
	0x000101017E010100, 0x000202027C020200, 0x000404047A040400, 0x0008080876080800,
	0x001010106E101000, 0x002020205E202000, 0x004040403E404000, 0x008080807E808000,
	0x0001017E01010100, 0x0002027C02020200, 0x0004047A04040400, 0x0008087608080800,
	0x0010106E10101000, 0x0020205E20202000, 0x0040403E40404000, 0x0080807E80808000,
	0x00017E0101010100, 0x00027C0202020200, 0x00047A0404040400, 0x0008760808080800,
	0x00106E1010101000, 0x00205E2020202000, 0x00403E4040404000, 0x00807E8080808000,
	0x007E010101010100, 0x007C020202020200, 0x007A040404040400, 0x0076080808080800,
	0x006E101010101000, 0x005E202020202000, 0x003E404040404000, 0x007E808080808000,
	0x7E01010101010100, 0x7C02020202020200, 0x7A04040404040400, 0x7608080808080800,
	0x6E10101010101000, 0x5E20202020202000, 0x3E40404040404000, 0x7E80808080808000
};



void Bitboard::print(uint64_t b){
	for(int r = 0; r < 8 ; ++r){
		cout << " " << 8-r << "   ";
		for(int f = 0; f < 8; ++f){
			cout << (!(b & (1ULL << (r*8+f))) ? 0 : 1) << " ";
		}
		cout << endl;
	}
	cout << endl << "     A B C D E F G H: " << b << endl << endl << endl;
}